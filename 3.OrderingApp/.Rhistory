shiny::runApp()
install.packages("tidyverse")
shiny::runApp()
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
remove.packages("dplyr", lib="~/R/R-3.4.2/library")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages(c("magick", "tidyverse", "dplyr"))
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages(c("gridExtra", "cowplot", "magick", "shiny"))
shiny::runApp()
install.packages("tidyverse")
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Load data we need to run the app
paths <- read_csv("input_data/image_paths.csv")
spirodata <- read_csv("input_data/toimport_2_final.csv") %>%
rename(participantID = participantid) %>%
left_join(paths, by = c("participantID", "testnum"))
View(spirodata)
spirodata <- spirodata %>% mutate(totaltests = case_when(is.na(totaltests) ~ 1, TRUE ~ totaltests) )
spirodata <- spirodata %>% mutate(totaltests = case_when(is.na(totaltests) ~ 1L, TRUE ~ totaltests) )
runApp()
runApp()
# Create initial ID
allID <- unique(spirodata$participantID)
currentID <- allID[1]
curvestoplot <- filter(spirodata, participantID == currentID)
# Create results dataframe
results <- tibble(participantID = allID, option1 = NA, option2 = NA, option3 = NA, comment = NA, class = NA)
# Interface
ui <- fluidPage(
titlePanel("Spirometry curve ordering"),
sidebarLayout(
sidebarPanel(width = 2,
# Ordering
h4("Curve ordering"),
"Please select the spiro test number. 3rd best option will be ignored if only two curves are available",
numericInput("c1", label = h5("Best curve"), value = 0, min = 0, max = 9),
numericInput("c2", label = h5("2nd best"), value = 0, min = 0, max = 9),
numericInput("c3", label = h5("3th best"), value = 0, min = 0, max = 10),
# Classification
radioButtons("class", label = h4("Classification"), choices = c("A", "B")),
# Comments
textInput("comment", label = h4("Comments"), value = ""),
# Submit
actionButton("submit", label = "Submit"),
hr(),
# # Start analysis
# h4("Start from scratch"),
# actionButton("start", label = "Start"),
# hr(),
# Load previous results
fileInput("file", label = h4("Load previous results")),
actionButton("load", label = "Load"),
hr(),
# Save current results
h4("Save file"),
# helpText("Save validation results to validation_results/datetime.csv"),
actionButton("save", label = "Save")
),
mainPanel(width = 10,
# Participant ID and curve
strong("ParticipantID: "), textOutput("currentID", inline =TRUE),br(),
hr(),
# Curves and tables,
plotOutput("curves", height = "700px", width = "100%")
)
## add warnings
)
)
# Analysis
server <- function(input, output) {
# Get identifier text to be displayed
output$currentID <- renderText(as.character(currentID))
# Draw spiros
output$curves <- renderPlot({
# Plot 1, available for all
img11 <- image_read(curvestoplot$curve1[1])
plot11 <- image_ggplot(img11) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[1])
img12 <- image_read(curvestoplot$curve2[1])
plot12 <- image_ggplot(img12) + theme(plot.margin = margin(0,0,0,0,"cm"))
# Plot 2, available for all
img21 <- image_read(curvestoplot$curve1[2])
plot21 <- image_ggplot(img21) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[2])
img22 <- image_read(curvestoplot$curve2[2])
plot22 <- image_ggplot(img22) + theme(plot.margin = margin(0,0,0,0,"cm"))
# Null plots by default
plot31 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot32 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot41 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot42 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot51 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot52 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot61 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot62 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
# If needed, substitute
if(nrow(curvestoplot) > 2){ # 3 or more curves
img31 <- image_read(curvestoplot$curve1[3])
plot31 <- image_ggplot(img31) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[3])
img32 <- image_read(curvestoplot$curve2[3])
plot32 <- image_ggplot(img32) + theme(plot.margin = margin(0,0,0,0,"cm"))
}
if(nrow(curvestoplot) > 3){ # 4 or more curves
img41 <- image_read(curvestoplot$curve1[4])
plot41 <- image_ggplot(img41) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[4])
img42 <- image_read(curvestoplot$curve2[4])
plot42 <- image_ggplot(img42) + theme(plot.margin = margin(0,0,0,0,"cm"))
}
if(nrow(curvestoplot) > 4){ # 5 or more curves
img51 <- image_read(curvestoplot$curve1[5])
plot51 <- image_ggplot(img51) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[5])
img52 <- image_read(curvestoplot$curve2[5])
plot52 <- image_ggplot(img52) + theme(plot.margin = margin(0,0,0,0,"cm"))
}
if(nrow(curvestoplot) == 6){ # 6 curves
img61 <- image_read(curvestoplot$curve1[6])
plot61 <- image_ggplot(img61) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[6])
img62 <- image_read(curvestoplot$curve2[6])
plot62 <- image_ggplot(img62) + theme(plot.margin = margin(0,0,0,0,"cm"))
}
plot_grid(plot11, plot12,
plot21, plot22,
plot31, plot32,
plot41, plot42,
plot51, plot52,
plot61, plot62,
ncol = 2,
rel_widths = c(0.5, 0.5))
}, height = 2000)
# Submit results
observeEvent(input$submit, {
# Enter results
results[results$participantID == currentID,]$option1 <<- input$c1
results[results$participantID == currentID,]$option2 <<- input$c2
results[results$participantID == currentID,]$option3 <<- ifelse(nrow(curvestoplot)==2, NA, input$c3) # Only if more than 2 curves
results[results$participantID == currentID,]$comment <<- input$comment
results[results$participantID == currentID,]$class <<- input$class
# Keep updating the subset of spiros with NAs
results_na <- results[is.na(results$class),]
# Create current values
currentID <<- results_na$participantID[1]
curvestoplot <<- filter(spirodata, participantID == currentID)
# Get identifier text to be displayed
output$currentID <- renderText(as.character(currentID))
# Draw spiros
output$curves <- renderPlot({
# Plot 1, available for all
img11 <- image_read(curvestoplot$curve1[1])
plot11 <- image_ggplot(img11) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[1])
img12 <- image_read(curvestoplot$curve2[1])
plot12 <- image_ggplot(img12) + theme(plot.margin = margin(0,0,0,0,"cm"))
# Plot 2, available for all
img21 <- image_read(curvestoplot$curve1[2])
plot21 <- image_ggplot(img21) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[2])
img22 <- image_read(curvestoplot$curve2[2])
plot22 <- image_ggplot(img22) + theme(plot.margin = margin(0,0,0,0,"cm"))
# Null plots by default
plot31 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot32 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot41 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot42 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot51 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot52 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot61 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot62 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
# If needed, substitute
if(nrow(curvestoplot) > 2){ # 3 or more curves
img31 <- image_read(curvestoplot$curve1[3])
plot31 <- image_ggplot(img31) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[3])
img32 <- image_read(curvestoplot$curve2[3])
plot32 <- image_ggplot(img32) + theme(plot.margin = margin(0,0,0,0,"cm"))
}
if(nrow(curvestoplot) > 3){ # 4 or more curves
img41 <- image_read(curvestoplot$curve1[4])
plot41 <- image_ggplot(img41) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[4])
img42 <- image_read(curvestoplot$curve2[4])
plot42 <- image_ggplot(img42) + theme(plot.margin = margin(0,0,0,0,"cm"))
}
if(nrow(curvestoplot) > 4){ # 5 or more curves
img51 <- image_read(curvestoplot$curve1[5])
plot51 <- image_ggplot(img51) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[5])
img52 <- image_read(curvestoplot$curve2[5])
plot52 <- image_ggplot(img52) + theme(plot.margin = margin(0,0,0,0,"cm"))
}
if(nrow(curvestoplot) == 6){ # 6 curves
img61 <- image_read(curvestoplot$curve1[6])
plot61 <- image_ggplot(img61) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[6])
img62 <- image_read(curvestoplot$curve2[6])
plot62 <- image_ggplot(img62) + theme(plot.margin = margin(0,0,0,0,"cm"))
}
plot_grid(plot11, plot12,
plot21, plot22,
plot31, plot32,
plot41, plot42,
plot51, plot52,
plot61, plot62,
ncol = 2,
rel_widths = c(0.5, 0.5))
}, height = 2000)
})
# load previous results
observeEvent(input$load, {
results <<- read_csv(input$file$datapath)
# Keep updating the subset of spiros with NAs
results_na <- results[is.na(results$class),]
# Create current values
currentID <<- results_na$participantID[1]
curvestoplot <<- filter(spirodata, participantID == currentID)
# Get identifier text to be displayed
output$currentID <- renderText(as.character(currentID))
# Draw spiros
output$curves <- renderPlot({
# Plot 1, available for all
img11 <- image_read(curvestoplot$curve1[1])
plot11 <- image_ggplot(img11) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[1])
img12 <- image_read(curvestoplot$curve2[1])
plot12 <- image_ggplot(img12) + theme(plot.margin = margin(0,0,0,0,"cm"))
# Plot 2, available for all
img21 <- image_read(curvestoplot$curve1[2])
plot21 <- image_ggplot(img21) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[2])
img22 <- image_read(curvestoplot$curve2[2])
plot22 <- image_ggplot(img22) + theme(plot.margin = margin(0,0,0,0,"cm"))
# Null plots by default
plot31 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot32 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot41 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot42 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot51 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot52 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot61 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
plot62 <- ggplot() + theme(plot.margin = margin(0,0,0,0,"cm"))
# If needed, substitute
if(nrow(curvestoplot) > 2){ # 3 or more curves
img31 <- image_read(curvestoplot$curve1[3])
plot31 <- image_ggplot(img31) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[3])
img32 <- image_read(curvestoplot$curve2[3])
plot32 <- image_ggplot(img32) + theme(plot.margin = margin(0,0,0,0,"cm"))
}
if(nrow(curvestoplot) > 3){ # 4 or more curves
img41 <- image_read(curvestoplot$curve1[4])
plot41 <- image_ggplot(img41) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[4])
img42 <- image_read(curvestoplot$curve2[4])
plot42 <- image_ggplot(img42) + theme(plot.margin = margin(0,0,0,0,"cm"))
}
if(nrow(curvestoplot) > 4){ # 5 or more curves
img51 <- image_read(curvestoplot$curve1[5])
plot51 <- image_ggplot(img51) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[5])
img52 <- image_read(curvestoplot$curve2[5])
plot52 <- image_ggplot(img52) + theme(plot.margin = margin(0,0,0,0,"cm"))
}
if(nrow(curvestoplot) == 6){ # 6 curves
img61 <- image_read(curvestoplot$curve1[6])
plot61 <- image_ggplot(img61) + theme(plot.margin = margin(0,0,0,0,"cm")) +
ggtitle(curvestoplot$final_label[6])
img62 <- image_read(curvestoplot$curve2[6])
plot62 <- image_ggplot(img62) + theme(plot.margin = margin(0,0,0,0,"cm"))
}
plot_grid(plot11, plot12,
plot21, plot22,
plot31, plot32,
plot41, plot42,
plot51, plot52,
plot61, plot62,
ncol = 2,
rel_widths = c(0.5, 0.5))
}, height = 2000)
})
# Write current results
observeEvent(input$save, {
write_csv(results, path = paste0("ordering_results/", gsub(":","-", Sys.time()), ".csv"))
})
}
spirodata <- spirodata %>% filter(totaltests == 1)
runApp()
runApp()
View(spirodata)
spirodata <- read_csv("input_data/toimport_2_final.csv") %>%
rename(participantID = participantid) %>%
left_join(paths, by = c("participantID", "testnum"))
spirodata <- spirodata %>% mutate(totaltests = case_when(is.na(totaltests) ~ 1L, TRUE ~ totaltests) )
spirodata <- spirodata %>% filter(totaltests != 1)
View(spirodata)
runApp()
spirodata <- read_csv("input_data/toimport_2_final.csv") %>%
rename(participantID = participantid) %>%
left_join(paths, by = c("participantID", "testnum"))
View(spirodata)
spirodata <- read_csv("input_data/new_list_indexchildren_tocarles.csv") %>%
rename(participantID = participantid) %>%
left_join(paths, by = c("participantID", "testnum"))
View(spirodata)
runApp()
spirodata <- read_csv("input_data/toimport_2_final.csv") %>%
rename(participantID = participantid) %>%
left_join(paths, by = c("participantID", "testnum"))
View(spirodata)
runApp()
View(spirodata)
runApp()
shiny::runApp()
spirodata <- read_csv("input_data/new_list_indexchildren_tocarles.csv") %>%
rename(participantID = participantid) %>%
left_join(paths, by = c("participantID", "testnum"))
library("gridExtra")
library("cowplot")
library("magick")
library("shiny")
library("tidyverse")
# Load data we need to run the app
paths <- read_csv("input_data/image_paths.csv")
# spirodata <- read_csv("input_data/toimport_2_final.csv") %>%
#   rename(participantID = participantid) %>%
#   left_join(paths, by = c("participantID", "testnum"))
#
spirodata <- read_csv("input_data/new_list_indexchildren_tocarles.csv") %>%
rename(participantID = participantid) %>%
left_join(paths, by = c("participantID", "testnum"))
# Create initial ID
allID <- unique(spirodata$participantID)
install.packages("rhrv")
install.packages("RHVH")
install.packages("RHRV")
#loading packages
library(RHRV)
library(dplyr)
library(ggplot2)
# load data
db <-
## testing short-term evaluating script from http://rhrv.r-forge.r-project.org/videos/ShortDemoScript.R
hrv.data = CreateHRVData()
hrv.data = CreateHRVData()
View(hrv.data)
hrv.data = SetVerbose(hrv.data, TRUE)
View(hrv.data)
##
hrv.data = LoadBeatAscii(hrv.data, "example.beats", RecordPath = ".")
